// console.log('Hello world');

// // Example 1
// const apples = 47;
// const grapes = 135;
// const total = apples + grapes;
// console.log(total)
// const diff = grapes - apples;
// console.log(diff)

// // Example 4

// console.log(Math)

// function makeMessage (name, price) {
//   // Change code below this line
//     const message = `You picked ${name}, price per item is ${price} credits`;
    
//   console.log(makeMessage('Radar', 6150));
//   console.log(makeMessage('Scanner', 3500));
//   console.log(makeMessage('Reactor', 8000));
//   console.log(makeMessage('Engine', 4070));
  
//   // Change code above this line
//   return message;
// };



// M#1 -  2

// * * * * * *  ІНСТРУКЦІЯ  if  ТА ЇЇ ВАРІАЦІЇ  * * * * * * *

// може використовувати різні оператори
// if () {
// } - нас цікавить лише один випадок, якщо він не справився ми нічого не ви  конуємо


// if () {
            //  - коли умова справдилась
// } else {
            // - коли умова не справдилась
// }

// const value = 10;
//  if(value === 1) {
//    console.log(1); // якщо value = 1, от покажі нам в консолі 1
//  } else if (value === 3){
//    console.log(3);
//  } else if (value === 7) {
//    console.log(7);
//  } else if (value === 10) {
//    console.log(10); // якщо кожна з перевірок не була пріведена true, то нас переносить на дефолтній else
//  } else {
   
//  }
// Блок if завжди вимагає щоб його умова або значення були приведені до true 

// const value = 12;
//  if(value === 1) {
//    console.log(1); // якщо value = 1, от покажі нам в консолі 1
//  } else if (value === 3){
//    console.log(3);
//  } else if (value === 7) {
//    console.log(7);
//  } else if (value === 10) {
//    console.log(10); // якщо кожна з перевірок не була пріведена true, то нас переносить на дефолтній else
//  } else {
//    console.log('default');
//  }

//  Коли вартот використовувати?
//Коли потрібно порівняти >,<, або порівняти декілька комбінованих операцій.

// const value = 10;
//  if(value === 1) {
//    console.log(1); 
//  } else if (value < 10 && value > 5){ //false - тому йдемо далі
//    console.log('first', 10);
//  } else if (value === 10) { // отримаємо true значення, тому відповідь  second 10 
//    console.log('second', 10);
//  } else {
//    console.log('default');
//  }

// сonst value = 4;
//  if(value === 1) {
//    console.log(1); // false - йдемо далі
//  } else if (value < 10 && value > 5){ // true && false - 4 < 10, але не > 10, тому відп false
//    console.log('first', 10);
//  } else if (value === 10) { // 4 не = 10 - false
//    console.log('second', 10);
//  } else {
//    console.log('default');// default -  тому що не отримили ні однієї відповіді true
//  }




                   // * * * *   КОНСТРУКЦІЯ  SWITCH   * * * *
 //Вікорістовуємо коли потрібно порівняти чісло з чіслом, рядок з рядком
 // працює швідше ніж if, але має деякі обмеження

 //

// const value = 4; // 
//  switch (value) { //кожен віпадок (зміннаабо значення)  порівнює на строге порівняння (===)
//   case 1:
//     console.log('один');
//     break;
//   case 3:
//     console.log('три');
//     break;
//   case 4:
//     console.log('чотири');
//     break;
//   case 7:
//     console.log('сім');
//     break;
//   default: // якщо не одін кейс не спрацював, якщо нам порібно можемо вставити дефолтний блок, не задаємо ніяких умов
//     console.log('default');
// }




                // * * * *   ТЕРНАРНИЙ  ОПЕРАТОР   * * * *

//будь-яке порівняння  в будь-якій комбінації

// const value = 10
// value > 15 && value < 20 ? console.log('в діапазоні від 15 до 20') : console.log('спробуйте ще');
// обов'язкоо ставімо в кінці знак питання "чи справді ця умова віконується?"


// const value = 10
// let message;
// value > 15 && value < 20 ? message = 'в діапазоні від 15 до 20' : message = 'спробуйте ще';
// console.log(message);


//Найчастіше на практіці буде зустрічатися такий віраз:
// const value = 15
// let message;
// message = value > 15 && value < 20 ? 'в діапазоні від 15 до 20' : 'спробуйте ще';
// console.log(message);



              // * * * *   ОБЛАСТІ  ВИДИМОСТІ   * * * * // (!!!Обов'язково!!!)
// Глобальна та локальна
// const
// let

// Тільки як зустрічається конструкція яка містить фігурні дужки,  це означає що ми відкрили локальну або блочну обл. видимості.
// Область видимості може зробити тільки крок на зовні
//Наприклад:
// const value = 10
// let str = 'hello world'
// if (true) {
//   // console.log(str); //отримуємо відповідь верхньої змінної   let str  'hello world'.
//   let number = 22 // якщо ми оголошемо змінну number і виведемо консоль за межамі фігурних дужок - отрим помилку. Тому що із області видимості можемо крок зробити тільки вперед
//   const str = 'I love JS';// Але якщо буде оголошена така сама змінна str, то консоль зчітає ту що ближча.
//   if (true) {         //Коли пропишемо 3 область видимості if, то через консоль можемо звернутись до змінної number, так як знаходиться вище на один крок назовні, по черзі
//     console.log(str)
//   }
// }

//switch (1) {
//}

// function (someName) {
//}


// Старіша версія віконувалась за допомогою змінної 
//   var 
// Глобальної та функціональної
// Данна змінна має поведінку  сплиття (hoisting)

// var num = 10;

// if (true) {
//   var num = 15;
// }
// console.log(num); //15
// бачить результат навіть за межами фігурних душок






                   // * * * *   ЦИКЛ  for   * * * *

// Це можлівість зробити певну операцію або список операцій певну кількість разів
//за допомогою ціклів можна перебрати рядочки, масиви
//Виконуємо однотипну дію для кожного елемента
// Найосновніший і найбазовіший цикл в JS

// for (let i = 0; i < 5; i += 1) {  
//   console.log(i); // 1 2 3 4
// }
//має три блоки:
// І -  блок ініціалізації, ств обов'язково  за допомогою змінної let, ств лічильник і (прийнято називати і або іте)
// ІІ - блок умова i < 5, до якіх пірбуде працювати наш цікл( доки і < 5) буде 5 ітерацій 0 1 2 3 4;
// ІІІ - блок поствираз і+=1, тобто на скільки ми будемо збільшувати наш лічильник пісдя кожної ітерації 

// Переберемо рядок
// const str = 'hello world';
//for (let i = 0; i < str.length; i += 1) {  
//  console.log(str[i]); // квадратні душки перебирає по літерах   
//}




                        // * * * *   ЦИКЛ  while   * * * *

// Призначен щоб робити якісь ітерації, повторення. Але на відміну від  for який має 3 блоки, while має 1 блок.
// Треба дуже уважно слідкувати за умовами, бо якщо  в умові зазначити true, комп'ютер зависне
// const str = 'hello world';
// let i = 0;
// while (i < str.length) {     //контролюємо умову, до яких пір у нас використовується данний цикл
//   console.log([i]); 
//   i += 1; // після кожної дії збільшуємо лічильник
//}




                        // * * * *   ЦИКЛ  do while   * * * *
// Cпочатку робить потім думає
// let i = 0;
// do {        // спочатку зроби
//   console.log('hello world');
//   i += 1;
// } while (i < 0)  // а потім перевіо чи потрібно його ще робити   
// яка б  умова не була хоча б один раз умова виконаєьтся


//let idx = -1  //првпущення, що данний елемента в якомусь рядочку відсутній
//const str = 'Hello world';
//for (let i = 0; i < str.length; i += 1) {
  //for (str[i] === 'w') {      // якщщо елемент, той який ми перебираємо співпадає з літерою 'w', то значення змінної idx перевизначаємо на елемент ітерації ( на значення лічильника)
    //idx = i;
    //break;    //перериваємо цикл,  ,   без переривання циклу перебирає весь ряжочок і знах останній індекс елемента якого ми знайдемо
  //}
//}
//console.log(idx);

//ВИВОДИМО ПАРНІ ЧИСЛА
//for (let i = 0; i <=   20; i += 1) {
  //if (i % 2 === 0) {
    //console.log('парне', i);
    //continue; // пририває поточну штерацію і відправляє нас в поствираз н азбільшення лічильника
  //}
  //console.log('не парне', i)
//}



 // Task - 1
  //Потрібно ств світлофор викоритовуючи конструкцію if
  //В prompt() юзер вводить колір який він бачить на світлофорі
  //В результаті виконання юзер має отримати повідомлення з дією яку має виконати

  //Можливі 4 стани світлофора
  //1 - red, action stop
  //2 - yellow, action ready
  //3 - green, action go
  // 4 - будь-який інший колір або значення відповідо світлофору не працює, action be careful
  
  //prompt - може поернути 2 значення: рядок (string),який надрукував користувач або null
  // з null не можна використовувати toLowerCase

// let message = prompt('color ?');
// let action;
//   if (message) {
//     message = message.toLowerCase()
// } 

// if (message === 'red') {
//   action = 'stop';
// } else if(message === 'yellow') {
//   action = 'ready';
// } else if (message === 'green') {
//   action = 'go';
// } else {
//   action = 'be careful';
// }
// console.log(action);
// console.log(message);



//Task - 3
// Потрібно створити додаток для автоматизації перевірки правильних відповідей на дитячі загадки
//Створи функцію яка буде пріймати 2 параметри
// 1 параметр - це текст загадки
// 2 правильна відповідь

//Після виклику функції користувач має побачити питання на екрані та поле для вводу відповіді, використовуй prompt()
//Функція має повертати булеве значення з результатом відповіді (true/false)

// function check(text, answer) { //назва функції
//   // console.log(text);
//   // console.log(answear);
//   const message = prompt(text); // повідомленя яке буде відправлене користувачем (його відповідь)
//   if(message) {
//     message = message.toLowerCase();
//   }
//   return message === answer;
// }
//   const result = check('Хоч не літак, а крилатий, без крил не може працювати.', 'Вітряк');  // і по назві викликаємо,(І аргумент - сама загадка, ІІ аргумент - відповідь) викликаємо данну фукцію і передаємо певні аргументи
//   console.log(result);
// check('Через воду він проводить, а сам з місця вік не сходить.', 'Міст');
//функція це певна обгортка для шматка коду, за допомогою певного шматочку коду ми можемо його перевикоистовувати

//Тестові данні
//Хоч не літак, а крилатий, без крил не може працювати
//(Вітряк)

//Через воду він проводить, а сам з місця вік не сходить.
//(Міст)



//Task - 4
// Потрібн створити функцію яка буде рахувати за скільки днив равлик зможе виповзти з колодязя
//Функція приймає І параметр - глибину колодязя, функція повертає кількість днів яку равлик витратив на шлях.
// За день равлик проповзає на 7м в гору, а за ніч на 2м вниз.
//Для вирішення завдання використовуй цикл while

// function getDays(deps){  //у функцію запsсуємо скільки днів був у дорозі та глибину
//   const daySpeed = 7; //швидкість за день
//   const nightSpeed = 2;// швидкість за ніч -2
//   let total = 0; //загальна кількіть яку він подолав
//   let days = 0; // загальна кількість днів яку він подолав у дорозі

//   while (total < deps) { //пишемо цикл і до яких пір наш равлик буде в дорозі, тільки як він пррівняєься з рівнем землі можна вважати що він виповз
//     total += daySpeed; // описуємо деньз його життя з момент як равлик потрапив у колодязь
//     days += 1;// кількість днів яку він знах у дорозі ми оновлюємо на 1 , тому що 1 його прохід ціклу це прохід з його життя.

//     if (total < deps) {
//       total -= nightSpeed;
//     }
//   }   
//   console.log(days); // після чого ми можемо побачити загальгу кількість днів яку він був у дорозі 
// }
// getDays(42)

// 42м, виповзе за 8 днів
// 17м, виповзе за 3 дні
// 18м, виповзе за 4 дні



//Task - 5
//Прорахуй скільки голосних  у реченні
// Зв допомогою 
function countVowel(str) { //функція підрахунку голосних, str - ми отримуємо один параметр, в нашому випадку це один рядочок
  const vowels = 'aeiou';
  let counter = 0;
  for (let i = 0; i < str.length; i += 1) { //за допомогою циклу for будемо перебирати наш рядочок str
    if(vowels.includes(str[i].toLowerCase())) {     // робимо умову, якщо рядок голосний літер включає в себе елемент якій ми ітеруємо ми вказуємо що збільшкєм наш лічильнік на +1.
      counter += 1;
    }
  }
  console.log(counter);
  return counter;//але нам потрібно його повертати його з функції
}
console.log(countVowel('HELLO WORLD')); // 3   //потрібно данний рядочок перебрати по елементно і перевірити чі кожен елемент данного рядка вхожить в масив
//console.log(countVowel('Junior Web Developer'));
